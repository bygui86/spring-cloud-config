
### SPRING

# Enable Spring Boot banner [console|log|off]
# Default is "console"
#spring.main.banner-mode=off

# Enable output highlighting
spring.output.ansi.enabled=always



### SPRING CLOUD-CONFIG


## FILESYSTEM
#spring.profiles.active=native
#spring.cloud.config.server.native.searchLocations=file://${HOME}/projects/springcloudconfigsample/springcloudserver/filesystem-repo/{application},\
#	file://${HOME}/projects/springcloudconfigsample/springcloudserver/filesystem-repo/{application}/{profile},\
#	file://${HOME}/projects/springcloudconfigsample/springcloudserver/filesystem-repo/{profile}/{application}

## GIT
# http
spring.cloud.config.server.git.uri=uri
# ssh
#spring.cloud.config.server.git.uri=uri

# Search paths to use within local working copy.
# Default searches only the root.
spring.cloud.config.server.git.search-paths={application},{application}/{profile},{profile}/{application}

# Enable cloning the repo on server startup
spring.cloud.config.server.git.clone-on-start=true
# Enable forcing a pull cloning the repo (avoiding problem if the local copy of the repo gets somehow dirty)
spring.cloud.config.server.git.force-pull=true

# With VCS based backends (git, svn) files are checked out or cloned to the local filesystem. By default they are put in the system temporary directory 
# with a prefix of "config-repo-". Some operating systems routinely clean out temporary directories. This can lead to unexpected behaviour such as missing 
# properties. To avoid this problem, change the directory Config Server uses, by a directory that does not reside in the system temp structure.
# The root folder hier refers to the project root folder (./springcloudconfigsample/springcloudserver/)
spring.cloud.config.server.git.basedir=temp-repo

# Default is "application"
#spring.cloud.config.server.default-application-name=
# Default is "default"
#spring.cloud.config.server.default-profile=
# Default is NULL
#spring.cloud.config.server.default-label=

# Repository access credentials
spring.cloud.config.server.git.username=username
spring.cloud.config.server.git.password=password

# Enable initialization of the config server Environment with properties from the remote repository.
# Can be useful when embedding the server in another application.
# Default is FALSE, because it delays startup.
#spring.cloud.config.server.bootstrap=true

# Enable server-side decryption
#	. TRUE to deliver already decrypted properties
#	. FALSE to deliver encrypted properties
# Default is TRUE
spring.cloud.config.server.encrypt.enabled=false



### ENCRYPTION

encrypt.key-store.location=classpath:/security/keytool-file.jks
encrypt.key-store.password=keytool-storepass
encrypt.key-store.alias=keytool-alias
encrypt.key-store.secret=keytool-keypass



### SPRING SECURITY

# Server access credentials
security.user.name=username
security.user.password=password



### SPRING WEB

# Set application port
server.port=8888



### LOGGING

# Configs
logging.pattern.console=%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(%logger{36}){cyan}: %m%n
logging.level.=info
